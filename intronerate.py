#!/usr/bin/env python

helptext = '''
This script will take the output of a run of HybSeqPipeline (exon sequences) and attempt
to extract intron sequences from the velvet assemblies. It is important that the
directory structure of HybSeqPipeline was not disturbed, so that it can be used to collect
information and re-execute exonerate.
'''

import sys,os,argparse
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq

def get_contig_info():
	'''Given the prefix of a run of HybSeqPipeline, retreive the stats from exonerate'''
	statspath = "exonerate_stats.csv"
	contig_info = [x.rstrip().split(',') for x in open(statspath).readlines()]
	#print contig_info
	sorted_contig_stats = sorted(contig_info, key = lambda x: int(x[2]))
	#print sorted_contig_stats
	return sorted_contig_stats
	
def make_intron_supercontig(contig_info,gene,prefix):
	cap3contigs = SeqIO.to_dict(SeqIO.parse("../{}_cap3ed.fa".format(gene),'fasta'))
	intron_supercontig = SeqRecord(Seq(''))
	for i in contig_info:
		intron_supercontig += cap3contigs[i[0]]
	intron_supercontig.id = '{}-{}'.format(prefix,gene)
	SeqIO.write(intron_supercontig,'intron_supercontig.fasta','fasta')	
	
def re_run_exonerate(gene):
	exonerate_cmd = "exonerate -m protein2genome -q ../{}_baits.fasta -t intron_supercontig.fasta --verbose 0 --showalignment no --showvulgar no --showtargetgff yes > intronerate.gff".format(gene)
	sys.stderr.write("[CMD] {}\n".format(exonerate_cmd))
	os.system(exonerate_cmd)
	introngff =  open("intronerate.gff").read()
	num_introns = introngff.count("intron\t")
	sys.stderr.write("{} introns found in {}!\n".format(num_introns,gene))
	return num_introns	

def main():
	parser = argparse.ArgumentParser(description=helptext,formatter_class=argparse.RawTextHelpFormatter)
	parser.add_argument("--genelist",help="Optional list of genes to retreive coverage. Default is to use genes_with_seqs.txt")
	parser.add_argument("--prefix",help="Prefix of sample directory generated by HybSeqPipeline",required=True)
	
	args=parser.parse_args()
	
	if len(sys.argv) < 2:
		print helptext
		sys.exit(1)
		
	if os.path.isdir(args.prefix):
		os.chdir(args.prefix)
		basedir = os.getcwd()
	else:
		sys.stderr.write("Directory {} not found!\n".format(args.prefix))	

	if args.genelist:
		genelist = [x.rstrip() for x in open(args.genelist).readlines()]
	else:
		genelist = [x.split()[0] for x in open('genes_with_seqs.txt').readlines()]

	with open("intron_stats.txt",'w') as intron_stats_file:	
		for gene in genelist:
			os.chdir("{}/{}".format(gene,args.prefix))
			contig_info = get_contig_info()
			make_intron_supercontig(contig_info,gene,args.prefix)
			num_introns = re_run_exonerate(gene)
			intron_stats_file.write("{}\t{}\t{}\n".format(args.prefix,gene,num_introns))
			os.chdir(basedir)



if __name__ == "__main__":main()