HybSeq Pipeline

by Matt Johnson and Norm Wickett, Chicago Botanic Gardens

Purpose: 
Targeted bait capture is a technique for sequencing many loci simultaneously.
The illumina reads are then assembled into long contigs.
This pipeline attempts to assign contigs to bait protein sequences.
The main output is one FASTA file per protein, containing the CDS portion of the homologous protein sequence.

------------Dependencies----------------
Python 2.7 or later
BIOPYTHON 1.6 or later
EXONERATE
BLAST command line tools

This pipeline runs with Python, version 2.7 or later, to take advantage of the argparse module for command-line argument.
It requires BIOPYTHON (version 1.6 or later) for parsing and handling nucleotide and protein sequences (www.biopython.org)
EXONERATE is used for alignment between bait proteins and assemblies, and retrieval of in-frame CDS sequences. 
If your baits were constructed with multiple sequences per gene, the "query_file_builder.py" script will create a "tailored" bait file, using the best match to the assembly for each gene. This script requires that BLAST command-line tools (specifically blastx) are installed in the $PATH
-----------------------------------------

-----------------Setup-------------------
Install the dependencies.
Construct a "bait file" of protein sequences. If you have just one sequence per bait, simply concatenate all of them into one file.
If you have more than one sequence per bait, they need to be identified before concatenation.
The ID for each sequence should include the bait source and the protein ID, separated by a hyphen. For example:
>Amborella-atpH
MNPLISAASVIAAGLAVGLASIGPGVGQGTAAGQAVEGIARQPEAEGKIRGTLLLSLAFM
[Future plans: Add helper script to do this]

------------------------------------------

----------------query_file_builder.py-----

This script generates the "tailored baitfile" for the species by choosing the best representative at each gene using a BLAST search against the assembly file. It also sets up all of the necessary file hierarchy to run the next step of the pipeline.

The input to the script requires a fasta file containing protein bait sequences, as described in Setup, and the nucleotide assembly file.

The script will use the prefix of the assembly file to generate a directory containing all the results. For the cleanest results, create a new directory, and use relative or absolute paths to indicate the locations of both the protein and assembly file.

For example, if one level up there is one directory containing baits and another containing assemblies:

EXAMPLE COMMAND LINE

query_file_builder.py ../baits/all_plastid_baits.FAA ../assemblies/speciesName.fasta

RESULTS AND OUTPUT FILES

Current directory: 
	the master bait file is copied here
	a BLAST database is generated
	A "Results directory" for the pipeline is generated (prefix of the assembly file)
	
Within the Results Directory:
	baitfile.FAA   	-- 	tailored bait file for this assembly
	assembly.fasta 	--	assembly copied here
	temp.blastx		--	results of BLAST search of assembly vs baitfile
	
----------------exonerate_hits.py----------
After the query_file_builder is complete, run this script next.
The minimal inputs are the tailored bait file and the assembly.

If run immediately after query_file_builder, use the --prefix flag to specify the file names:

EXAMPLE COMMAND LINE

exonerate_hits.py speciesName/baitfile.FAA speciesName/assembly.fasta --prefix=speciesName

RESULTS AND OUTPUT FILES

In speciesName directory:
	exonerate_results.fasta		--	Results from the exonerate search, before filtering.
	sequences					--	nucleotide (FNA) and amino acid (FAA) sequences,
										one per locus

The threshold for accepting an exonerate hit can be adjusted with -t (Default: 55 percent)



	
	
The major steps of the pipeline include:

1) Generation of control files, containing filenames and various parameters.

2) Given an assembly and a set of protein baits for each gene, select the best protein bait for this assembly. This generates a “tailored” bait file, so that exonerate has the best chance to find a CDS in the assembly.

3) Conduct one or more exonerate searches for each protein in the assembly, ensuring that each contig is also the best hit for the protein (Reciprocal Best Hit). If multiple contigs match the same protein in non-overlapping sequences, stitch the hits together into a “supercontig”

4) In a subdirectory, generate separate FASTA files containing either the nucleotide (FNA) or amino acid (FAA) sequence for each protein. 

5) Optional utilities after running the pipeline for multiple assemblies: 
     NOTE: for these utilities to work, the files must be in the same directory hierarchy created by the pipeline.
               (i.e. species/alignments/FAA/ and species/alignments/FNA/)
     a) Generate a single file for one or more proteins.
               Simple FASTA or use MAFFT to align it.
     b) Summarize the completeness of the alignments, gene by gene.
               Creates a matrix: each row is a species with length of each protein (in alphabetical order) separated by tabs.
     c) Matrixmerge: generate supermatrix from all aligned matricies.                                                                                     

